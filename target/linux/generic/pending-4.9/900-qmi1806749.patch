--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -61,6 +61,7 @@
 
 enum qmi_wwan_quirks {
 	QMI_WWAN_QUIRK_DTR = 1 << 0,	/* needs "set DTR" request */
+    QMI_WWAN_QUIRK_QUECTEL_DYNCFG = 1 << 1, /* check num. endpoints */
 };
 
 static void qmi_wwan_netdev_setup(struct net_device *net)
@@ -548,6 +549,21 @@
 	.data           = QMI_WWAN_QUIRK_DTR,
 };
 
+static const struct driver_info    qmi_wwan_info_quirk_quectel_dyncfg = {
+    .description    = "WWAN/QMI device",
+    .flags      = FLAG_WWAN | FLAG_SEND_ZLP,
+    .bind       = qmi_wwan_bind,
+    .unbind     = qmi_wwan_unbind,
+    .manage_power   = qmi_wwan_manage_power,
+    .rx_fixup       = qmi_wwan_rx_fixup,
+    .data           = QMI_WWAN_QUIRK_DTR | QMI_WWAN_QUIRK_QUECTEL_DYNCFG,
+};
+
+#define QMI_MATCH_FF_FF_FF(vend, prod) \
+	USB_DEVICE_AND_INTERFACE_INFO(vend, prod, USB_CLASS_VENDOR_SPEC, \
+				      USB_SUBCLASS_VENDOR_SPEC, 0xff), \
+	.driver_info = (unsigned long)&qmi_wwan_info_quirk_dtr
+
 #define HUAWEI_VENDOR_ID	0x12D1
 
 /* map QMI/wwan function by a fixed interface number */
@@ -568,6 +579,15 @@
 #define QMI_GOBI_DEVICE(vend, prod) \
 	QMI_FIXED_INTF(vend, prod, 0)
 
+/* Quectel does not use fixed interface numbers on at least some of their
+ * devices. We need to check the number of endpoints to ensure that we bind to
+ * the correct interface.
+ */
+#define QMI_QUIRK_QUECTEL_DYNCFG(vend, prod) \
+        USB_DEVICE_AND_INTERFACE_INFO(vend, prod, USB_CLASS_VENDOR_SPEC, \
+                         USB_SUBCLASS_VENDOR_SPEC, 0xff), \
+        .driver_info = (unsigned long)&qmi_wwan_info_quirk_quectel_dyncfg
+
 static const struct usb_device_id products[] = {
 	/* 1. CDC ECM like devices match on the control interface */
 	{	/* Huawei E392, E398 and possibly others sharing both device id and more... */
@@ -673,9 +693,18 @@
 		.driver_info = (unsigned long)&qmi_wwan_info,
 	},
 
+    {QMI_QUIRK_QUECTEL_DYNCFG(0x2c7c, 0x0125)}, /* Quectel EC25, EC20 R2.0  Mini PCIe */
+    {QMI_QUIRK_QUECTEL_DYNCFG(0x2c7c, 0x0306)}, /* Quectel EP06/EG06/EM06 */
+    {QMI_QUIRK_QUECTEL_DYNCFG(0x2c7c, 0x0512)}, /* Quectel EG12/EM12 */
+    {QMI_QUIRK_QUECTEL_DYNCFG(0x2c7c, 0x0620)}, /* Quectel EM20 */
+	 {QMI_MATCH_FF_FF_FF(0x2c7c, 0x0800)},	/* Quectel RM500Q-GL */
+	{QMI_MATCH_FF_FF_FF(0x2c7c, 0x030b)},	/* Quectel EM060 */
+	{QMI_MATCH_FF_FF_FF(0x2c7c, 0x0122)},	/* Quectel RM550 */
+
 	/* 3. Combined interface devices matching on interface number */
 	{QMI_FIXED_INTF(0x0408, 0xea42, 4)},	/* Yota / Megafon M100-1 */
 	{QMI_FIXED_INTF(0x05c6, 0x6001, 3)},	/* 4G LTE usb-modem U901 */
+	{QMI_FIXED_INTF(0x05c6, 0x5042, 3)}, /* ME9215 */
 	{QMI_FIXED_INTF(0x05c6, 0x7000, 0)},
 	{QMI_FIXED_INTF(0x05c6, 0x7001, 1)},
 	{QMI_FIXED_INTF(0x05c6, 0x7002, 1)},
@@ -706,6 +732,26 @@
 	{QMI_FIXED_INTF(0x05c6, 0x9021, 1)},
 	{QMI_FIXED_INTF(0x05c6, 0x9022, 2)},
 	{QMI_FIXED_INTF(0x05c6, 0x9025, 4)},	/* Alcatel-sbell ASB TL131 TDD LTE  (China Mobile) */
+	{QMI_QUIRK_SET_DTR(0x03f0, 0x0857, 1)},
+	{QMI_QUIRK_SET_DTR(0x05c6, 0xf601, 5)},
+	{QMI_FIXED_INTF(0x0489, 0xe0b4, 0)},	/* Foxconn T77W968 LTE */
+	{QMI_FIXED_INTF(0x1bc7, 0x1910, 0)},	/* LN960 */
+	{QMI_FIXED_INTF(0x19d2, 0x1432, 3)},	/* ME3620-Z*/
+	{QMI_FIXED_INTF(0x413c, 0x81d7, 0)},
+	{QMI_FIXED_INTF(0x05c6, 0x90db, 2)},
+	{QMI_FIXED_INTF(0x2001, 0x7e3d, 4)},
+	{QMI_MATCH_FF_FF_FF(0x1508, 0x1001)},
+	{QMI_FIXED_INTF(0x161c, 0x9115, 4)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90b1, 8)}, /* Sierra Wireless EM7511 */
+	{QMI_FIXED_INTF(0x2dee, 0x4d22, 5)},
+	{QMI_FIXED_INTF(0x161c, 0x9115, 4)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x9090, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x9090, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90b1, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d2, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d2, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d3, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d3, 10)},
 	{QMI_FIXED_INTF(0x05c6, 0x9026, 3)},
 	{QMI_FIXED_INTF(0x05c6, 0x902e, 5)},
 	{QMI_FIXED_INTF(0x05c6, 0x9031, 5)},
@@ -955,11 +982,9 @@
 	{QMI_FIXED_INTF(0x03f0, 0x9d1d, 1)},	/* HP lt4120 Snapdragon X5 LTE */
 	{QMI_FIXED_INTF(0x22de, 0x9061, 3)},	/* WeTelecom WPD-600N */
 	{QMI_QUIRK_SET_DTR(0x1e0e, 0x9001, 5)},	/* SIMCom 7100E, 7230E, 7600E ++ */
-	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0125, 4)},	/* Quectel EC25, EC20 R2.0  Mini PCIe */
 	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0121, 4)},	/* Quectel EC21 Mini PCIe */
 	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0191, 4)},	/* Quectel EG91 */
 	{QMI_FIXED_INTF(0x2c7c, 0x0296, 4)},	/* Quectel BG96 */
-	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0306, 4)},	/* Quectel EP06 Mini PCIe */
 
 	/* 4. Gobi 1000 devices */
 	{QMI_GOBI1K_DEVICE(0x05c6, 0x9212)},	/* Acer Gobi Modem Device */
@@ -1040,6 +1065,7 @@
 {
 	struct usb_device_id *id = (struct usb_device_id *)prod;
 	struct usb_interface_descriptor *desc = &intf->cur_altsetting->desc;
+    const struct driver_info *info;
 
 	/* Workaround to enable dynamic IDs.  This disables usbnet
 	 * blacklisting functionality.  Which, if required, can be
@@ -1069,7 +1095,20 @@
 		return -ENODEV;
 	}
 
-	return usbnet_probe(intf, id);
+    info = (void *)&id->driver_info;
+
+    /* Several Quectel modems supports dynamic interface configuration, so
+     * we need to match on class/subclass/protocol. These values are
+     * identical for the diagnostic- and QMI-interface, but bNumEndpoints is
+     * different. Ignore the current interface if the number of endpoints
+     * equals the number for the diag interface (two).
+     */
+    if (info->data & QMI_WWAN_QUIRK_QUECTEL_DYNCFG) {
+        if (desc->bNumEndpoints == 2)
+            return -ENODEV;
+    }
+
+    return usbnet_probe(intf, id);
 }
 
 static struct usb_driver qmi_wwan_driver = {
